{
    "classConstructor": {
        "body": "constructor (props) {\n\tsuper(props)\n\t$0\n}\n",
        "description": "Adds a default constructor for the class that contains props as arguments",
        "prefix": "con"
    },
    "classConstructorContext": {
        "body": "constructor (props, context) {\n\tsuper(props, context)\n\t$0\n}\n",
        "description": "Adds a default constructor for the class that contains props and context as arguments",
        "prefix": "conc"
    },
    "componentDidMount": {
        "body": "componentDidMount () {\n\t$0\n}\n",
        "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.",
        "prefix": "cdm"
    },
    "componentDidUpdate": {
        "body": "componentDidUpdate (prevProps, prevState) {\n\t$0\n}\n",
        "description": "Invoked immediately after the component's updates are flushed to the DOM.",
        "prefix": "cdup"
    },
    "componentGetDerivedStateFromProps": {
        "body": "\nstatic getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
        "description": "Invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates.",
        "prefix": "cgd"
    },
    "componentProps": {
        "body": "this.props.$0",
        "description": "Access component's props",
        "prefix": "tp"
    },
    "componentRender": {
        "body": "render () {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
        "description": "When called, it should examine this.props and this.state and return a single child element.",
        "prefix": "ren"
    },
    "componentSetStateFunc": {
        "body": "this.setState((state, props) => { return { $0 }})\n",
        "description": "Performs a shallow merge of nextState into current state",
        "prefix": "ssf"
    },
    "componentSetStateObject": {
        "body": "this.setState($0)",
        "description": "Performs a shallow merge of nextState into current state",
        "prefix": "sst"
    },
    "componentState": {
        "body": "this.state.$0",
        "description": "Access component's state",
        "prefix": "ts"
    },
    "componentWillMount": {
        "body": "\ncomponentWillMount () {\n\t$0\n}\n",
        "description": "Invoked once, both on the client and server, immediately before the initial rendering occurs",
        "prefix": "cwm"
    },
    "componentWillReceiveProps": {
        "body": "componentWillReceiveProps (nextProps) {\n\t$0\n}\n",
        "description": "Invoked when a component is receiving new props. This method is not called for the initial render.",
        "prefix": "cwr"
    },
    "componentWillUnmount": {
        "body": "componentWillUnmount () {\n\t$0\n}\n",
        "description": "Invoked immediately before a component is unmounted from the DOM.",
        "prefix": "cwun"
    },
    "componentWillUpdate": {
        "body": "componentWillUpdate (nextProps, nextState) {\n\t$0\n}\n",
        "description": "Invoked immediately before rendering when new props or state are being received.",
        "prefix": "cwup"
    },
    "destructuring of props": {
        "prefix": "dp",
        "body": [
            "const { ${1:name} } = this.props"
        ]
    },
    "destructuring of state": {
        "prefix": "ds",
        "body": [
            "const { ${1:name} } = this.state"
        ]
    },
    "if falsy return null": {
        "body": "if (!${1:condition}) {\n\treturn null\n}",
        "prefix": "ifr"
    },
    "jsx element": {
        "body": "<${1:elementName}>\n\t$0\n</${1}>",
        "description": "an element",
        "prefix": "j"
    },
    "jsx element self closed": {
        "body": "<${1:elementName} />",
        "description": "an element self closed",
        "prefix": "jc"
    },
    "jsx element wrap selection": {
        "body": "<${1:elementName}>\n\t{$TM_SELECTED_TEXT}\n</${1}>",
        "description": "an element",
        "prefix": "jsx wrap selection with element"
    },
    "jsx elements map": {
        "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
        "description": "an element self closed",
        "prefix": "jm"
    },
    "jsx elements map with return": {
        "body": "{${1:array}.map((item) => {\n\treturn <${2:elementName} key={item.id}>\n\t$0\n</${2}>\n})}",
        "description": "an element self closed",
        "prefix": "jmr"
    },
    "reactClassCompoment": {
        "body": "import React, { Component } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ${1}",
        "description": "Creates a React component class",
        "prefix": "rcc"
    },
    "reactClassCompomentPropTypes": {
        "body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
        "description": "Creates a React component class with PropTypes",
        "prefix": "rccp"
    },
    "reactClassCompomentWithMethods": {
        "body": "import React, { Component, PropTypes } from 'react'\n\nclass ${TM_FILENAME_BASE} extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t}\n\n\tcomponentWillMount () {\n\n\t}\n\n\tcomponentDidMount () {\n\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\n\t}\n\n\tshouldComponentUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentWillUpdate (nextProps, nextState) {\n\n\t}\n\n\tcomponentDidUpdate (prevProps, prevState) {\n\n\t}\n\n\tcomponentWillUnmount () {\n\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n${1}.propTypes = {\n\n}\n\nexport default ${1}",
        "description": "Creates a React component class with PropTypes and all lifecycle methods",
        "prefix": "rcfc"
    },
    "reactFunctionComponent": {
        "body": "import React from 'react'\n\nconst ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}\n\nexport default ${1}",
        "description": "Creates a React function component without PropTypes",
        "prefix": "rfc"
    },
    "reactFunctionComponentWithEmotion": {
        "body": "import { css } from '@emotion/core'\nimport React from 'react'\n\nexport const ${TM_FILENAME_BASE} = () => {\n\treturn (\n\t\t<div css={css``}>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
        "description": "Creates a React functional component with emotion",
        "prefix": "rfce"
    },
    "reactJustClassCompoment": {
        "body": "class ${TM_FILENAME_BASE} extends Component {\n\trender () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t$0\n\t\t\t</div>\n\t\t)\n\t}\n}\n",
        "description": "Creates a React component class",
        "prefix": "rcjc"
    },
    "reactStatelessProps": {
        "body": "import React, { PropTypes } from 'react'\n\nconst ${TM_FILENAME_BASE} = props => {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t)\n}\n\n${1}.propTypes = {\n\t$0\n}\n\nexport default ${1}",
        "description": "Creates a React function component with PropTypes",
        "prefix": "rfcp"
    },
    "shouldComponentUpdate": {
        "body": "shouldComponentUpdate (nextProps, nextState) {\n\t$0\n}\n",
        "description": "Invoked before rendering when new props or state are being received. ",
        "prefix": "scu"
    },
    "useCallback": {
        "description": "React useCallback() hook",
        "prefix": "ucb",
        "body": [
            "const ${1:memoizedCallback} = useCallback(",
            "\t() => {",
            "\t\t${2:doSomething}(${3:a}, ${4:b})",
            "\t},",
            "\t[${5:a}, ${6:b}],",
            ")$0"
        ]
    },
    "useContext": {
        "description": "React useContext() hook",
        "prefix": "uc",
        "body": [
            "const $1 = useContext($2)$0"
        ]
    },
    "useEffect": {
        "description": "React useEffect() hook",
        "prefix": "ue",
        "body": [
            "useEffect(() => {",
            "\t$1",
            "\n\treturn () => {",
            "\t\t$2",
            "\t}",
            "}, [${3:dependencies}])$0"
        ]
    },
    "useMemo": {
        "description": "React useMemo() hook",
        "prefix": "ume",
        "body": [
            "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
        ]
    },
    "useRef": {
        "description": "React useContext() hook",
        "prefix": "ur",
        "body": [
            "const ${1:elName}El = useRef(null)$0"
        ]
    },
    "useState": {
        "body": "const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = useState(${2:default${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}});",
        "description": "use state hook",
        "prefix": "us"
    }
}