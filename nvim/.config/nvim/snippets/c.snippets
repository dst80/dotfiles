## Main
# main
snippet main
	int main(int argc, char *argv[])
	{
		${0}
		return 0;
	}
#
# main(void)
snippet mainv
	int main(void)
	{
		${0}
		return 0;
	}
##
## Preprocessor
snippet inc
	#include <${1:stdio}.h>
#
snippet Inc
	#include "${1:`expand("%:r")`.h}"
#
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
#
# define
snippet def
	#define
#
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
#
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
#
# header include guard
snippet once
	#ifndef ${1:`toupper(expand("%:r")_H)`}

	#define $1

	${0}

	#endif /* end of include guard: $1 */
#
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	} /* extern "C" */
	#endif
##
## Control Statements
snippet if
	if (${1:true}) 
    {
		${0:${VISUAL}}
	}
#
snippet else
	else 
    {
		${0:${VISUAL}}
	}
#
snippet elif
	else if (${1:true}) 
    {
		${0:${VISUAL}}
	}
#
snippet ifinline
	if (${1:true}) ${0};
#
snippet ternary
	${1:/* condition */} ? ${2:a} : ${3:b}
#
snippet switch
	switch (${1:/* variable */}) 
    {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
#
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
#    
snippet ret
	return ${0};
##
## Loops
#
snippet for
	for (${1:int} ${2:i} = 0; $2 < ${3:count}; {4:++}$2$)
    {
		${0:${VISUAL}}
	}
#
snippet while
	while (${1:/* condition */}) 
    {
		${0:${VISUAL}}
	}
#
snippet do
	do 
    {
		${0:${VISUAL}}
	} while (${1:/* condition */});
##
## Functions
# function declaration
snippet fundecl0
	${1:void} ${2:function_name}();
#
snippet fundecl
	${1:void} ${2:function_name}(${3});
    
# function definition
snippet func
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
#
snippet func0
	${1:void} ${2:function_name}()
	{
		${3}
	}
#
snippet param
	${1:int} ${2:value}
#
snippet cparam
	const ${1:int}& ${2:value}
#
snippet param2
	${1:int} ${2:value}, ${3:int} ${4:value2}
#
snippet cparam2
	const ${1:int}& ${2:value}, const ${3:int}& ${4:value2}
#
snippet param3
	${1:int} ${2:value}, ${3:int} ${4:value2}, ${5:int} ${6:value3}
#
snippet cparam3
	const ${1:int}& ${2:value}, const ${3:int}& ${4:value2}, const ${5:int}& ${6:value2}

##
## Types
snippet typedef
	typedef ${1:int} ${2:MyCustomType};
#
snippet struct
	struct ${1:`expand("%:r")`} 
    {
		${2:Data} /*!< ${4:Description} */
	}${5: /* optional variable list */};
#
snippet tdstruct
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`expand("%:r")`};

snippet enum
	enum ${1:name} { ${0} };
#
# typedef enum
snippet tde
	typedef enum 
    {
		${1:Data} /*!< ${3:Description} */
	} ${2:foo};
##
## Input/Output
# printf
snippet printf
	printf("${1:%s}\n"${2});
#
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet eprint
	printf(${1:stderr}, "${2:%s}\n"${3});
snippet dprintf
	printf("${1:} = %d\n", $1);
snippet fprintf
	print("${1:} = %f\n", $1);
snippet xprintf
	printf("${1:} = %${2}\n", $1);
#
#
## Assertions
snippet asr
	assert(${1:condition});
#
#
snippet anl
	assert(${1:ptr} != NULL);
#
## Dynamic Allocation
snippet malloc
	(${1:type}*) malloc(sizeof($1));
#
#
snippet calloc
	(${1:type}*) calloc(${2:size}, sizeof($1));
#
#
snippet amalloc
	${1:ptr} = (${2:type}*) malloc(sizeof($2));
#
#
snippet acalloc
	${1:ptr} = (${2:type}*) calloc(${3:size}, sizeof($2));
#
#
snippet arealloc
	${1:ptr} = realloc($1, ${2:size} * sizeof(${3:type}));
#
#
snippet mamalloc
	${1:type} ${2:ptr} = ($1*) malloc(sizeof($1));
#
#
snippet macalloc
	${1:type} ${2:ptr} = ($1*) calloc(${3:size}, sizeof($1));
#
#
snippet free
	free(${1:ptr});
#
##
# TODO section
snippet todo
	/*! TODO: ${1:Todo description here}
	 *  \todo $1
	 */
## Miscellaneous
# This is kind of convenient
snippet .
	[${1}]
#
#
snippet asm
	__asm__ __volatile__(
	"${0}\n\t"
	:
	:
	);