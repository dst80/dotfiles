
# if condition
snippet if
	if (${1:true})
	{
		${0:${VISUAL}}
	}
#
snippet else
	else
	{
		${0:${VISUAL}}
	}
# ternary conditional
snippet ternary
	${1} ? ${2} : ${0}
#
snippet ?
	${1} ? ${2} : ${0}
# do while loop
snippet do
	do
	{
		${0:${VISUAL}}
	} while (${1:true});
# while loop
snippet while
	while (${1:true})
	{
		${0:${VISUAL}}
	}
# for loop
snippet for
	for (int ${1:i} = 0; $1 < ${2:count}; $1${3:++})
	{
		${0}
	}
#
snippet forreverse
	for (int ${1:i} = ${2:length}; $1 >= 0; $1--)
	{
		${0}
	}
# foreach
snippet foreach
	foreach (${1:var} ${2:entry} in ${3})
	{
		${0}
	}
# interfaces
snippet interface
	public interface ${1:`expand("%:r")`}
	{
		${0}
	}
# class bodies
snippet class
	${2:public} class ${1:`expand("%:r")`}
	{
		${0}
	}
#
snippet sclass
	${2:public} static class ${1:`expand("%:r")`}
	{
		${0}
	}
#
snippet aclass
	${2:public} abstract class ${1:`expand("%:r")`}
	{
		${0}
	}   
# constructor
snippet ctor0
	public ${1:`expand("%:r")`}()
	{
		${0}
	}
#
snippet ctor
	public ${1:`expand("%:r")`}(${2})
	{
		${0}
	}
# properties - auto properties by default.
# default type is int with layout get / set.
snippet prop
	${1:public} ${2:int} ${3} { get; set; }
#
snippet prop_adv
	${1:public} ${2:int} ${3} { get; ${4:private} set; }
# members - void
#
snippet func0
	${1:public} ${2:void} ${3:FunctionName}()
	{
		${0}
	}
#
snippet func
	${1:public} ${2:void} ${3:FunctionName}(${4})
	{
		${0}
	}
#
snippet param
    ${1:int} ${2:value}
#
snippet param2
    ${1:int} ${2:value}, ${3:int} ${4:value2}
#
snippet param3
    ${1:int} ${2:value}, ${3:int} ${4:value2}, ${5:int} ${6:value2} 

# structure
snippet struct
	public struct ${1:`expand("%:r")`}
	{
		${0}
	}
# enumeration
snippet enum
	enum ${1}
	{
		${0}
	}

# inline xml documentation
#
snippet ///
	/// <summary>
	/// ${0}
	/// </summary>
#
snippet <param
	<param name="${1}">${2:$1}</param>
#
snippet <exception
	<exception cref="${1:System.Exception}">${2}</exception>
#
snippet <returns
	<returns>${1}</returns>
#
snippet <see
	<see cref="${1}"/>
#
snippet <remarks
	<remarks>${1}</remarks>
#
snippet <code
	<code>${1}</code>
#
snippet cw
	Console.WriteLine(${1});
#
# equals override
snippet eq
	public override bool Equals(object obj)
	{
		if (obj == null || GetType() != obj.GetType())
		{
			return false;
		}
		${0:throw new NotImplementedException();}
		return base.Equals(obj);
	}
# exception
snippet exception
	public class ${1:MyException} : ${2:Exception}
	{
		public $1() { }
		public $1(string message) : base(message) { }
		public $1(string message, Exception inner) : base(message, inner) { }
		protected $1(
			System.Runtime.Serialization.SerializationInfo info,
			System.Runtime.Serialization.StreamingContext context)
				: base(info, context) { }
	}
# indexer
snippet index
	public ${1:object} this[${2:int} index]
	{
		get { ${0} }
		set { ${0} }
	}
# eventhandler
snippet eventhandler
	EventHandler eventhandler = ${1:MyEvent};
	if (${2:eventhandler} != null)
	{
		$2();
	}
# lock
snippet lock
	lock (${1:this})
	{
		${0}
	}
# namespace
snippet namespace
	namespace ${1:Namespace}
	{
		${0}
	}
# switch
snippet switch
	switch (${1:switch_on})
	{
		${0}
		default:
	}
# try
snippet try
	try
	{
		${0:${VISUAL}}
	}
	catch (${1:System.Exception})
	{
		throw;
	}
snippet tryf
	try
	{
		${0:${VISUAL}}
	}
	finally
	{
		${1}
	}
# using
snippet using
	using (${1:resource})
	{
		${0}
	}
# preprocessor directives
snippet #if
	#if
		${0}
	#endif
# Main
#
snippet sim
	${1:public} static int Main(string[] args)
	{
		${0}
		return 0;
	}
#
snippet simc
	public class Application
	{
		${1:public} static int Main(string[] args)
		{
			${0}
			return 0;
		}
	}
#
snippet svm
	${1:public} static void Main(string[] args)
	{
		${0}
	}
